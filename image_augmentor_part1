import cv2
import sys
import numpy as np
import os

# Output folder and extension
FOLDER_NAME = "augmented_image_display"
EXTENSION = ".jpg"
os.makedirs(FOLDER_NAME, exist_ok=True)

# Load image
image_file = "flower.jpg"
image = cv2.imread(image_file)

if image is None:
    print(f"Error: Cannot read image '{image_file}'. Please check the file path.")
    sys.exit(1)

# Augmentation functions
def horizontal_flip(image): return cv2.flip(image, 1)
def vertical_flip(image): return cv2.flip(image, 0)
def rotate_90(image): return cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)
def rotate_180(image): return cv2.rotate(image, cv2.ROTATE_180)
def rotate_270(image): return cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)

# Scale but restore to original size
def scale_half(image):
    scaled = cv2.resize(image, None, fx=0.5, fy=0.5)
    return cv2.resize(scaled, (image.shape[1], image.shape[0]))

def scale_double(image):
    scaled = cv2.resize(image, None, fx=2.0, fy=2.0)
    return cv2.resize(scaled, (image.shape[1], image.shape[0]))

# Augmentation mapping
augmentations = {
    0: ("Horizontal Flip", horizontal_flip),
    1: ("Vertical Flip", vertical_flip),
    2: ("Rotate 90", rotate_90),
    3: ("Rotate 180", rotate_180),
    4: ("Rotate 270", rotate_270),
    5: ("Scale 0.5x (resized to original)", scale_half),
    6: ("Scale 2x (resized to original)", scale_double)
}

# Function to apply augmentation
def apply_augmentation(index):
    try:
        name, func = augmentations[index]
        result = func(image)
        print(f"Original size: {image.shape[1]}x{image.shape[0]}")
        print(f"Augmented size: {result.shape[1]}x{result.shape[0]}")
        filename = f"{FOLDER_NAME}/{name.replace(' ', '_')}{EXTENSION}"
        cv2.imwrite(filename, result)
        cv2.imshow(f"Augmentation: {name}", result)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    except KeyError:
        print("Invalid index. Please choose a valid augmentation index.")

# Main logic
if len(sys.argv) > 1:
    try:
        idx = int(sys.argv[1])
        apply_augmentation(idx)
    except ValueError:
        print("Invalid argument. Please provide a numeric index.")
else:
    print("Available augmentation techniques:")
    for idx, (name, _) in augmentations.items():
        print(f"{idx}: {name}")
    try:
        selected = int(input("Enter the index of the augmentation to apply: "))
        apply_augmentation(selected)
    except ValueError:
        print("Invalid input. Please enter a number.")
